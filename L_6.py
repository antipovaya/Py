# Задача №39. Решение в группах
# Даны два массива чисел. Требуется вывести те элементы
# первого массива (в том порядке, в каком они идут в первом
# массиве), которых нет во втором массиве. Пользователь вводит
# число N - количество элементов в первом массиве, затем N
# чисел - элементы массива. Затем число M - количество
# элементов во втором массиве. Затем элементы второго массива
# Ввод: Вывод:
# 7 3 3 2 12
# 3 1 3 4 2 4 12
# 6
# 4 15 43 1 15 1 (каждое число вводится с новой строки)

# def new_lst(num):
#     lst_1 = [int(input('Введите элемент: ')) for i in range(num)]
#     return lst_1
#
#
# n = int(input('Введите количество элементов 1-го списка: '))
# list_1 = new_lst(n)
# print(list_1)
#
# m = int(input('Введите количество элементов 2-го списка: '))
# list_2 = new_lst(m)
# print(list_2)

# def search(list1, list2):
#     res = []
#     for i in list1:
#         if i not in list2:
#             res.append(i)
#     print(res)

# def search(list1, list2):
#     res = [i for i in list1 if i not in list2]
#     print(res)
#
#
# search(list_1, list_2)


#######################################################################################################################
# Задача №41. Решение в группах
# Дан массив, состоящий из целых чисел. Напишите
# программу, которая в данном массиве определит
# количество элементов, у которых два соседних и, при
# этом, оба соседних элемента меньше данного. Сначала
# вводится число N — количество элементов в массиве
# Далее записаны N чисел — элементы массива. Массив
# состоит из целых чисел.
# Ввод: Ввод:
# 5 5
# 1 2 3 4 5 1 5 1 5 1
# Вывод: Вывод:
# 0 2
# (каждое число вводится с новой строки)

# def count_min(list1):
#     count = 0
#     for i in range(1, len(list1) - 1):
#         if list1[i] > list1[i-1] and list1[i] > list1[i+1]:
#             count += 1
#     return count
#
#
# n = int(input('Введите количество элементов 1-го списка: '))
# list_1 = new_lst(n)
# print(list_1)
# counter = count_min(list_1)
# print(counter)

#######################################################################################################################
# Задача №43. Решение в группах
# Дан список чисел. Посчитайте, сколько в нем пар
# элементов, равных друг другу. Считается, что любые
# два элемента, равные друг другу образуют одну пару,
# которую необходимо посчитать. Вводится список
# чисел. Все числа списка находятся на разных
# строках.
# Ввод: Вывод:
# 1 2 3 2 3 2

# def identical_number(lst):
#     count = 0
#     for i in range(len(lst)):
#         for j in range (i + 1, len(lst)):
#             if lst[i] == lst[j]:
#                 count += 1
#     print(count)
#
#
# n = int(input('Введите количество элементов 1-го списка: '))
# list_1 = new_lst(n)
# print(list_1)
# identical_number(list_1)


#######################################################################################################################

# Задача №45. Решение в группах
# Два различных натуральных числа n и m называются
# дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и
# наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных
# чисел, каждое из которых не превосходит k. Программа
# получает на вход одно натуральное число k, не
# превосходящее 105
# . Программа должна вывести все
# пары дружественных чисел, каждое из которых не
# превосходит k. Пары необходимо выводить по одной в
# строке, разделяя пробелами. Каждая пара должна быть
# выведена только один раз (перестановка чисел новую
# пару не дает).
# Ввод: Вывод:
# 300 220 284

def delitel(num):
    total = 0

    for i in range(1, num):
        if num % i == 0:
            total += i
    return total


n = int(input('Введите первое число: '))
m = int(input('Введите второе число: '))

sum_del_n = delitel(n)
sum_del_m = delitel(m)
if sum_del_n == m and sum_del_m == n:
    print('Ваши числа дружественные!')
else:
    print('Ваши числа не дружественные.')



